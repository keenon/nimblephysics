name: Build and Publish Wheels (Linux x86_64)

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-linux-x86_64:
    name: Linux Python x86_64 ${{ matrix.python-version }} - Build Wheels
    runs-on: ubuntu-latest
    # Using a container with the necessary build environment
    container: keenon/diffdart:base
    env:
      # This is set for compatibility with older Node.js versions if needed by dependencies.
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    strategy:
      # Fail-fast is set to false to ensure all Python versions are attempted even if one fails.
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        include:
          - python-version: "3.9"
            PYTHON_VERSION_CODE: cp39-cp39
            PYTHON_VERSION_NUMBER: "3.9"
            PYTHON: /opt/python/cp39-cp39/bin/python3.9
            PYTHON_PATH: /opt/python/cp39-cp39/bin/
            PYTHON_INCLUDE: /opt/python/cp39-cp39/include/python3.9/
            PYTHON_LIB: /opt/python/cp39-cp39/lib/python3.9
          - python-version: "3.10"
            PYTHON_VERSION_CODE: cp310-cp310
            PYTHON_VERSION_NUMBER: "3.10"
            PYTHON: /opt/python/cp310-cp310/bin/python3.10
            PYTHON_PATH: /opt/python/cp310-cp310/bin/
            PYTHON_INCLUDE: /opt/python/cp310-cp310/include/python3.10/
            PYTHON_LIB: /opt/python/cp310-cp310/lib/python3.10
          - python-version: "3.11"
            PYTHON_VERSION_CODE: cp311-cp311
            PYTHON_VERSION_NUMBER: "3.11"
            PYTHON: /opt/python/cp311-cp311/bin/python3.11
            PYTHON_PATH: /opt/python/cp311-cp311/bin/
            PYTHON_INCLUDE: /opt/python/cp311-cp311/include/python3.11/
    steps:
      - name: Set up Node Version
        # Updated to v4 for latest features and security.
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Check out the repo
        # Updated to v4 for latest features and security.
        uses: actions/checkout@v4

      - name: Set version variable
        id: set_version
        run: |
          VER=$(cat ./VERSION.txt)
          echo "VERSION=$VER"
          echo "VERSION=$VER" >> $GITHUB_ENV

      - name: Test environment
        run: |
          echo "VERSION=${{ env.VERSION }}"
          echo "PYTHON_VERSION_CODE=${{ matrix.PYTHON_VERSION_CODE }}"

      - name: Install build dependencies
        # auditwheel==5.1.2
        run: ${{ matrix.PYTHON }} -m pip install setuptools pytest wheel auditwheel pybind11-stubgen numpy torch

      - name: Install Pybind11 for this Python version
        run: |
          git clone https://github.com/pybind/pybind11.git
          cd pybind11
          git checkout v2.11.1
          mkdir build && cd build
          PATH="${{ matrix.PYTHON_PATH }}:${PATH}" CPATH="${{ matrix.PYTHON_INCLUDE }}" cmake ..
          PATH="${{ matrix.PYTHON_PATH }}:${PATH}" CPATH="${{ matrix.PYTHON_INCLUDE }}" make install -j2

      - name: Build wheel
        run: |
          PATH="${{ matrix.PYTHON_PATH }}:${PATH}" CPATH="${{ matrix.PYTHON_INCLUDE }}" ${{ matrix.PYTHON }} setup.py sdist bdist_wheel
          # The auditwheel command repairs the wheel and places it in the 'wheelhouse' directory
          ${{ matrix.PYTHON }} -m auditwheel repair dist/nimblephysics-${{ env.VERSION }}-${{ matrix.PYTHON_VERSION_CODE }}-linux_x86_64.whl --wheel-dir wheelhouse

      - name: Upload wheel artifact
        # Updated to actions/upload-artifact@v4
        # All wheels from the matrix jobs will be added to a single artifact named 'python-wheels'.
        uses: actions/upload-artifact@v4
        with:
          # Use the Python version to create a unique artifact name for each job
          name: python-wheels-${{ matrix.python-version }}
          path: wheelhouse/*.whl

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    # This job depends on the successful completion of all the build jobs.
    needs: [build-linux-x86_64]
    steps:
      - name: Download all wheel artifacts
        # Updated to actions/download-artifact@v4
        # It downloads all files from the 'python-wheels' artifact directly into the 'wheelhouse' directory.
        uses: actions/download-artifact@v4
        with:
          # Use a wildcard to download all artifacts that match the pattern
          pattern: python-wheels-*
          path: wheelhouse
          # This ensures all downloaded artifacts are placed into the same directory
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R wheelhouse

      - name: Publish package to PyPI
        # Using the latest major version of the pypi-publish action.
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: wheelhouse/
          skip_existing: true
          verbose: true
